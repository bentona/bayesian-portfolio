}
justone
?mean
?dcast
knitr::opts_chunk$set(echo = TRUE)
library(rjags)
library(magrittr)
library(tidyverse)
library(data.table)
df <- read.csv("~/Personal/bayesian-portfolio/df.csv", stringsAsFactors = FALSE)
df <- read.csv("~/Documents/bayes_porfolio/bayesian-portfolio/df.csv", stringsAsFactors = FALSE)
df <- read.csv("~/Documents/bayes_porfolio/bayesian-portfolio/sample.csv", stringsAsFactors = FALSE)
df <- read.csv("~/Documents/bayes_porfolio/bayesian-portfolio/sample.csv", stringsAsFactors = FALSE)
df <- read.csv("~/Documents/bayes_portfolio/bayesian-portfolio/sample.csv", stringsAsFactors = FALSE)
df$date <- as.Date(df$datetime)
justone <- df[df$symbol == 'PRTA',]
justone <- justone[1:200,]
for (i in 30:nrow(justone)){
target <- justone$date[i] - as.difftime(31, unit="days")
#found <- justone[justone$datetime > target, 'datetime']
print(justone$date[i])
print(target)
print("\n")
}
justone
sample <- read.csv("~/Personal/bayesian-portfolio/sample.csv", stringsAsFactors = FALSE)
sample <- read.csv("~/Documents/bayes_portfolio/bayesian-portfolio/sample.csv", stringsAsFactors = FALSE)
sample$date <- as.Date(sample$datetime)
sample$symbol <- as.factor(sample$symbol)
justone <- sample[sample$symbol == 'PRTA',]
justone <- justone[1:200,]
add_return_pct <- function(x, y){
df <- x
df$close_30_ago = NA
df$date_30_ago = NA
date_offset <- 22
for (i in (date_offset+1):nrow(df)){
# TODO - do fancy date parsing for more exact offsets
df$date_30_ago[i] <- as.character(df$date[i - date_offset])
df$close_30_ago[i] <- df$close[i - date_offset]
}
df$last_30_return <- df$close / df$close_30_ago - 1
df$annualized_last_30_return = (df$last_30_return + 1) ^ (365/30) - 1
df
}
by_symbol <- sample %>% group_by(symbol) %>% group_map(add_return_pct, keep = TRUE)
by_symbol
View(by_symbol)
View(by_symbol)
by_symbol[[1]]
str(by_symbol[[1]])
by_symbol[[1]]
x <- data.table(ticker =by_symbol[[1]]$symbol ,data=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
x
dim(by_symbol)
length(by_symbol)
#for (i in 1:length(by_symbol)){
test <- data.table()
for (i in 1:2){
x <- data.table(ticker =by_symbol[[i]]$symbol ,data=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
test <- cbind(test, x)
}
?cbind2()
?plyr::cbind.fill
#for (i in 1:length(by_symbol)){
test <- data.table()
for (i in 1:2){
x <- data.table(ticker =by_symbol[[i]]$symbol ,data=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
test <- cbind.fill(test, x)
}
#for (i in 1:length(by_symbol)){
test <- data.table()
for (i in 1:2){
x <- data.table(ticker =by_symbol[[i]]$symbol ,data=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
test <- plyr::cbind.fill(test, x)
}
?left_join()
#for (i in 1:length(by_symbol)){
test <- data.table()
for (i in 1:2){
x <- data.table(ticker =by_symbol[[i]]$symbol ,data=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
test <- left_join(test,x, by=date)
}
#for (i in 1:length(by_symbol)){
test <- data.table()
for (i in 1:2){
x <- data.table(ticker =by_symbol[[i]]$symbol ,data=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
test <- left_join(test,x, by="date")
}
min(sample$date)
test <- data.table(date=c(min(sample$date):max(sample$date)))
#for (i in 1:length(by_symbol)){
test <- data.table(date=c(min(sample$date):max(sample$date)))
for (i in 1:2){
x <- data.table(ticker =by_symbol[[i]]$symbol ,data=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
test <- left_join(test,x, by="date")
}
#for (i in 1:length(by_symbol)){
test <- data.table(date=c(min(sample$date):max(sample$date)))
for (i in 1:2){
x <- data.table(ticker =by_symbol[[i]]$symbol ,date=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
test <- left_join(test,x, by="date")
}
#for (i in 1:length(by_symbol)){
test <- data.table(date=c(min(sample$date):max(sample$date)))
for (i in 1:2){
x <- data.table(ticker =by_symbol[[i]]$symbol ,date=as.Date(by_symbol[[i]]$date), return=by_symbol[[i]]$last_30_return)
test <- left_join(test,x, by="date")
}
#for (i in 1:length(by_symbol)){
test <- data.table(date=as.Date(c(min(sample$date):max(sample$date))))
#for (i in 1:length(by_symbol)){
test <- data.table(date=as.Date(c(min(sample$date):max(sample$date))))
#for (i in 1:length(by_symbol)){
test <- data.table(date=as.Date(c(min(sample$date):max(sample$date))))
test <- data.table(date=as.Date(c(min(sample$date):max(sample$date))))
?as.Date
test <- data.table(date=c(min(sample$date):max(sample$date)))
test$date <- as.character(test$date)
test <- data.table(date=c(min(sample$date):max(sample$date)))
test$date <- as.Date.character(test$date)
?as.Date.character
x
test$date <- as.Date.character(test$date,format = "%Y-%m-%d")
for (i in 1:2){
x <- data.table(ticker =by_symbol[[i]]$symbol ,date=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
test <- left_join(test,x, by="date")
}
#for (i in 1:length(by_symbol)){
test <- data.table(date=c(min(sample$date):max(sample$date)))
test$date <- as.Date.character(test$date,format = "%Y-%m-%d")
for (i in 1:2){
x <- data.table(ticker =by_symbol[[i]]$symbol ,date=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
test <- left_join(test,x, by="date")
}
x
test
View(test)
x
for (i in 2:3){
y <- data.table(ticker =by_symbol[[i]]$symbol ,date=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
test <- left_join(test,x, by="date")
}
test <- left_join(x,y, by="date")
View(test)
stock_returns <- data.table(ticker =by_symbol[[1]]$symbol ,date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
stock_returns <- data.table(ticker =by_symbol[[1]]$symbol ,date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
for (i in 2:4){
x <- data.table(ticker =by_symbol[[i]]$symbol ,date=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
stock_returns <- left_join(stock_returns,y, by="date")
}
length(by_symbol)
#for (i in 1:length(by_symbol)){
#test <- data.table(date=c(min(sample$date):max(sample$date)))
#test$date <- as.Date.character(test$date,format = "%Y-%m-%d")
stock_returns <- data.table(ticker =by_symbol[[1]]$symbol ,date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
for (i in 2:length(by_symbol)){
x <- data.table(ticker =by_symbol[[i]]$symbol ,date=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
stock_returns <- left_join(stock_returns,y, by="date")
}
test
x
View(stock_returns)
for (i in 2:length(by_symbol)){
x <- data.table(date=by_symbol[[i]]$date, by_symbol[[i]]$symbol[1]=by_symbol[[i]]$last_30_return)
varname <- by_symbol[[i]]$symbol[1]
varname
varname <- as.character(by_symbol[[i]]$symbol[1])
varname
for (i in 2:length(by_symbol)){
varname <- as.character(by_symbol[[i]]$symbol[1])
dt <- data.table(date=by_symbol[[i]]$date, !!varname :=by_symbol[[i]]$last_30_return)
stock_returns <- left_join(stock_returns,x, by="date")
}
?mutate
?assign
#for (i in 1:length(by_symbol)){
#test <- data.table(date=c(min(sample$date):max(sample$date)))
#test$date <- as.Date.character(test$date,format = "%Y-%m-%d")
stock_returns <- data.table(ticker =by_symbol[[1]]$symbol ,date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
for (i in 2:length(by_symbol)){
varname <- as.character(by_symbol[[i]]$symbol[1])
dt <- data.table(date=by_symbol[[i]]$date, assign(varname,by_symbol[[i]]$last_30_return))
stock_returns <- left_join(stock_returns,x, by="date")
}
View(stock_returns)
stock_returns <- data.table(ticker =by_symbol[[1]]$symbol ,date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
View(stock_returns)
stock_returns <- data.table(date=by_symbol[[i]]$date, assign(as.character(by_symbol[[1]]$symbol[1]),by_symbol[[i]]$last_30_return))
View(stock_returns)
varname <- as.character(by_symbol[[i]]$symbol[1])
stock_returns <- data.table(date=by_symbol[[i]]$date, assign(varname,by_symbol[[i]]$last_30_return))
View(stock_returns)
varname
varname <- as.character(by_symbol[[1]]$symbol[1])
varname
stock_returns <- data.table(date=by_symbol[[1]]$date, assign(varname,by_symbol[[1]]$last_30_return))
View(stock_returns)
stock_returns <- data.table(date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return))
stock_returns <- data.table(date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
assign(varname, stock_returns$return)
View(stock_returns)
View(stock_returns)
setnames(stock_returns, "return",paste(varname))
View(stock_returns)
varname <- as.character(by_symbol[[i]]$symbol[1])
varname
dt <- data.table(date=by_symbol[[i]]$date, assign(varname,by_symbol[[i]]$last_30_return))
setnames(dt, "return",paste(varname))
dt <- data.table(date=by_symbol[[i]]$date, return= by_symbol[[i]]$last_30_return)
setnames(dt, "return",paste(varname))
View(dt)
stock_returns <- left_join(stock_returns,x, by="date")
View(stock_returns)
varname <- as.character(by_symbol[[1]]$symbol[1])
stock_returns <- data.table(date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
setnames(stock_returns, "return",paste(varname))
varname <- as.character(by_symbol[[i]]$symbol[1])
dt <- data.table(date=by_symbol[[i]]$date, return= by_symbol[[i]]$last_30_return)
setnames(dt, "return",paste(varname))
stock_returns <- left_join(stock_returns,dt, by="date")
View(stock_returns)
#for (i in 1:length(by_symbol)){
#test <- data.table(date=c(min(sample$date):max(sample$date)))
#test$date <- as.Date.character(test$date,format = "%Y-%m-%d")
varname <- as.character(by_symbol[[1]]$symbol[1])
stock_returns <- data.table(date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
setnames(stock_returns, "return",paste(varname))
for (i in 2:length(by_symbol)){
varname <- as.character(by_symbol[[i]]$symbol[1])
dt <- data.table(date=by_symbol[[i]]$date, return= by_symbol[[i]]$last_30_return)
setnames(dt, "return",paste(varname))
stock_returns <- left_join(stock_returns,dt, by="date")
}
View(stock_returns)
sample <- read.csv("~/Documents/bayes_portfolio/bayesian-portfolio/sample.csv", stringsAsFactors = FALSE)
sample$date <- as.Date(sample$datetime)
sample$symbol <- as.factor(sample$symbol)
justone <- sample[sample$symbol == 'PRTA',]
justone <- justone[1:200,]
add_return_pct <- function(x, y){
df <- x
df$close_30_ago = NA
df$date_30_ago = NA
date_offset <- 22
for (i in (date_offset+1):nrow(df)){
# TODO - do fancy date parsing for more exact offsets
df$date_30_ago[i] <- as.character(df$date[i - date_offset])
df$close_30_ago[i] <- df$close[i - date_offset]
}
df$last_30_return <- df$close / df$close_30_ago - 1
df$annualized_last_30_return = (df$last_30_return + 1) ^ (365/30) - 1
df
}
by_symbol <- sample %>% group_by(symbol) %>% group_map(add_return_pct, keep = TRUE)
by_symbol
# Create data table with 30 day stock returns by ticker name (includes date)
varname <- as.character(by_symbol[[1]]$symbol[1])
stock_returns <- data.table(date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
setnames(stock_returns, "return",paste(varname))
for (i in 2:length(by_symbol)){
varname <- as.character(by_symbol[[i]]$symbol[1])
dt <- data.table(date=by_symbol[[i]]$date, return= by_symbol[[i]]$last_30_return)
setnames(dt, "return",paste(varname))
stock_returns <- left_join(stock_returns,dt, by="date")
}
View(stock_returns)
setwd("~/Documents/bayesian-portfolio")
View(stock_returns)
knitr::opts_chunk$set(echo = TRUE)
library(rjags)
library(magrittr)
library(tidyverse)
library(data.table)
# Create data table with 30 day stock returns by ticker name (includes date)
varname <- as.character(by_symbol[[1]]$symbol[1])
stock_returns <- data.table(date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
setnames(stock_returns, "return",paste(varname))
for (i in 2:length(by_symbol)){
varname <- as.character(by_symbol[[i]]$symbol[1])
dt <- data.table(date=by_symbol[[i]]$date, return= by_symbol[[i]]$last_30_return)
setnames(dt, "return",paste(varname))
stock_returns <- full_join(stock_returns,dt, by="date")
}
View(stock_returns)
# Create data table with 30 day stock returns by ticker name (includes date)
varname <- as.character(by_symbol[[1]]$symbol[1])
stock_returns <- data.table(date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
setnames(stock_returns, "return",paste(varname))
for (i in 2:length(by_symbol)){
varname <- as.character(by_symbol[[i]]$symbol[1])
dt <- data.table(date=by_symbol[[i]]$date, return= by_symbol[[i]]$last_30_return)
setnames(dt, "return",paste(varname))
stock_returns <- full_join(stock_returns,dt, by="date")
}
View(stock_returns)
View(sample)
cov(stock_returns)
test <- as.matrix(stock_returns[,2:ncol(stock_returns)])
cov(test)
?var
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
sample <- read.csv("~/Documents/bayes_portfolio/bayesian-portfolio/sample.csv", stringsAsFactors = FALSE)
knitr::opts_chunk$set(echo = TRUE)
sample <- read.csv("~/Documents/bayesian-portfolio/sample.csv", stringsAsFactors = FALSE)
sample$date <- as.Date(sample$datetime)
sample$symbol <- as.factor(sample$symbol)
justone <- sample[sample$symbol == 'PRTA',]
justone <- justone[1:200,]
add_return_pct <- function(x, y){
df <- x
df$close_30_ago = NA
df$date_30_ago = NA
date_offset <- 22
for (i in (date_offset+1):nrow(df)){
# TODO - do fancy date parsing for more exact offsets
df$date_30_ago[i] <- as.character(df$date[i - date_offset])
df$close_30_ago[i] <- df$close[i - date_offset]
}
df$last_30_return <- df$close / df$close_30_ago - 1
df$annualized_last_30_return = (df$last_30_return + 1) ^ (365/30) - 1
df
}
by_symbol <- sample %>% group_by(symbol) %>% group_map(add_return_pct, keep = TRUE)
# Create data table with 30 day stock returns by ticker name (includes date)
varname <- as.character(by_symbol[[1]]$symbol[1])
stock_returns <- data.table(date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
setnames(stock_returns, "return",paste(varname))
for (i in 2:length(by_symbol)){
varname <- as.character(by_symbol[[i]]$symbol[1])
dt <- data.table(date=by_symbol[[i]]$date, return= by_symbol[[i]]$last_30_return)
setnames(dt, "return",paste(varname))
stock_returns <- full_join(stock_returns,dt, by="date")
}
View(stock_returns)
knitr::opts_chunk$set(echo = TRUE)
stock_returns <- omit.na(stock_returns)
knitr::opts_chunk$set(echo = TRUE)
stock_returns <- na.omit(stock_returns)
knitr::opts_chunk$set(echo = TRUE)
test <- stock_returns[,drop(-1)]
View(test)
knitr::opts_chunk$set(echo = TRUE)
covmat <- cov(stock_returns[,drop(-1)])
knitr::opts_chunk$set(echo = TRUE)
View(covmat)
knitr::opts_chunk$set(echo = TRUE)
# Some random parameters
T <- nrow(stock_returns)
N <- ncol(stock_returns)
# Create covariance matrix
covmat <- cov(stock_returns[,drop(-1)])
# Create vector of weights
w <- runif(N, 0,100)
w <- w/sum(w)
sum(w)
knitr::opts_chunk$set(echo = TRUE)
# Some random parameters
T <- nrow(stock_returns)
N <- ncol(stock_returns)
# Create covariance matrix
covmat <- cov(stock_returns[,drop(-1)])
# Create Random vector of weights
w <- runif(N, 0,100)
w <- w/sum(w)
# Expected returns
e_returns <- colMeans(stock_returns[,drop(-1)])
# Expected portfolio return
e_port_return <- w*e_returns
# Portfolio Variance
port_var <- tr(w)%*%covmat%*%w
knitr::opts_chunk$set(echo = TRUE)
# Some random parameters
T <- nrow(stock_returns)
N <- ncol(stock_returns)
# Create covariance matrix
covmat <- cov(stock_returns[,drop(-1)])
# Create Random vector of weights
w <- runif(N, 0,100)
w <- w/sum(w)
# Expected returns
e_returns <- colMeans(stock_returns[,drop(-1)])
# Expected portfolio return
e_port_return <- w*e_returns
# Portfolio Variance
port_var <- t(w)%*%covmat%*%w
knitr::opts_chunk$set(echo = TRUE)
# Some random parameters
T <- nrow(stock_returns)
N <- ncol(stock_returns[,drop(-1)])
# Create covariance matrix
covmat <- cov(stock_returns[,drop(-1)])
# Create Random vector of weights
w <- runif(N, 0,100)
w <- w/sum(w)
# Expected returns
e_returns <- colMeans(stock_returns[,drop(-1)])
# Expected portfolio return
e_port_return <- w*e_returns
# Portfolio Variance
port_var <- t(w)%*%covmat%*%w
# Sharpe ratio
sharpe <- e_port_return * sqrt((t(w)%*%solve(covmat)%*%w))
# Some random parameters
T <- nrow(stock_returns)
N <- ncol(stock_returns[,drop(-1)])
# Create covariance matrix
covmat <- cov(stock_returns[,drop(-1)])
# Create Random vector of weights
w <- runif(N, 0,100)
w <- w/sum(w)
# Expected returns
e_returns <- colMeans(stock_returns[,drop(-1)])
# Expected portfolio return
e_port_return <- w*e_returns
# Portfolio Variance
port_var <- t(w)%*%covmat%*%w
# Sharpe ratio
sharpe <- e_port_return * sqrt((t(w)%*%solve(covmat)%*%w))
knitr::opts_chunk$set(echo = TRUE)
# Sharpe ratio
sharpe <- sqrt((t(w)%*%solve(covmat)%*%w))
knitr::opts_chunk$set(echo = TRUE)
sharpe
knitr::opts_chunk$set(echo = TRUE)
# Sharpe ratio
sharpe <- e_port_return / sqrt(port_var)
knitr::opts_chunk$set(echo = TRUE)
port_var
knitr::opts_chunk$set(echo = TRUE)
e_port_return
knitr::opts_chunk$set(echo = TRUE)
# Some random parameters
T <- nrow(stock_returns)
N <- ncol(stock_returns[,drop(-1)])
# Create covariance matrix
covmat <- cov(stock_returns[,drop(-1)])
# Create Random vector of weights
w <- runif(N, 0,100)
w <- w/sum(w)
# Expected returns
e_returns <- colMeans(stock_returns[,drop(-1)])
# Expected portfolio return
e_port_return <- sum(w*e_returns)
# Portfolio Variance
port_var <- t(w)%*%covmat%*%w
# Sharpe ratio
sharpe <- e_port_return / sqrt(port_var)
sharpe
port_var
e_port_return
knitr::opts_chunk$set(echo = TRUE)
X <- as.matrix(stock_returns[,drop(-1)])
knitr::opts_chunk$set(echo = TRUE)
tXX <- t(X)%*%X
knitr::opts_chunk$set(echo = TRUE)
View(tXX)
knitr::opts_chunk$set(echo = TRUE)
isSymmetric.matrix(tXX)
knitr::opts_chunk$set(echo = TRUE)
omega <- solve(covmat)
knitr::opts_chunk$set(echo = TRUE)
# Degrees of freedom
df <- sum(diag(covmat))/port_var
knitr::opts_chunk$set(echo = TRUE)
# Scale matrix
scale <- diag(N)
?diwish
install.packages("MCMCpack")
install.packages("LaplacesDemon")
library(LaplacesDemon)
knitr::opts_chunk$set(echo = TRUE)
Diwish <- dinvwishart(covmat, df, scale)
View(Diwish)
View(scale)
knitr::opts_chunk$set(echo = TRUE)
Diwish <- dinvwishart(omega, df, scale)
knitr::opts_chunk$set(echo = TRUE)
Diwish <- dinvwishart(covmat, df, scale)
knitr::opts_chunk$set(echo = TRUE)
Diwish <-
dinvwishart(covmat, df, scale)
knitr::opts_chunk$set(echo = TRUE)
#Diwish <-
dinvwishart(covmat, df, scale)
knitr::opts_chunk$set(echo = TRUE)
prior <- rinvwishart(df,scale)
View(prior)
df
46*46
knitr::opts_chunk$set(echo = TRUE)
mat1 <- t(w)%*%covmat%*%w
mat2 <- t(w)%*%solve(covmat)%*%w
1/mat1
mat2
knitr::opts_chunk$set(echo = TRUE)
mat1 <- t(w)%*%covmat%*%w
mat2 <- t(w)%*%solve(covmat)%*%w
mat1
mat2
knitr::opts_chunk$set(echo = TRUE)
mat2 <- solve(covmat)
knitr::opts_chunk$set(echo = TRUE)
1/mat1
knitr::opts_chunk$set(echo = TRUE)
1/t(w)%*%solve(mat2)%*%w
knitr::opts_chunk$set(echo = TRUE)
mat1 <- t(w)%*%covmat%*%w
mat2 <- solve(covmat)
1/t(w)%*%solve(mat2)%*%w
1/mat1
