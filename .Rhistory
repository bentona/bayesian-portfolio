cov1 <- cov(daily_return)
port_ret1 <- rowSums(daily_return*w)
w <- runif(C)
w <- w/sum(w)
mu0 <- mean(port_ret1)
s2 <- t(w)%*%cov1%*%w
# Priors
tau_p <- 10
a <- 0.01
b <- 0.01
V <- 1/tau_p
for (i in 1:10){
for (s in 1:S){
P <- n/s2 + V
M <- sum(port_ret1)/s2 + mu0*V
mu <- rnorm(1,M/P, 1/sqrt(P))
A <- n/2 + a
B <- sum((Y-mu)^2)/2 + b
s2 <- 1/rgamma(1,A,B)
sharpe <- mu/sqrt(s2)
port_samples[s,] <- c(mu, s2, sharpe,i)
}
portfolios[[i]] <- c(i,w)
}
knitr::opts_chunk$set(echo = TRUE)
View(port_samples)
knitr::opts_chunk$set(echo = TRUE)
dim(port_samples)
mean(port_samples$port)
mean(port_samples[,4])
nrow(port_samples)
knitr::opts_chunk$set(echo = TRUE)
# Gibbs sampler for portfolio Varying Weights
set.seed(876)
n <- nrow(daily_return)
# Create a place for sample data
portfolios <- list()
N_port <- 10
S <- 10000
port_samples <- matrix(NA,S*N_port,4)
colnames(port_samples) <- c("ret","s2","sharpe","port")
# Initial Values
mu1 <- colMeans(daily_return)
cov1 <- cov(daily_return)
port_ret1 <- rowSums(daily_return*w)
w <- runif(C)
w <- w/sum(w)
mu0 <- mean(port_ret1)
s2 <- t(w)%*%cov1%*%w
# Priors
tau_p <- 10
a <- 0.01
b <- 0.01
V <- 1/tau_p
for (i in 1:10){
for (s in 1:S){
P <- n/s2 + V
M <- sum(port_ret1)/s2 + mu0*V
mu <- rnorm(1,M/P, 1/sqrt(P))
A <- n/2 + a
B <- sum((Y-mu)^2)/2 + b
s2 <- 1/rgamma(1,A,B)
sharpe <- mu/sqrt(s2)
port_samples[s,] <- c(mu, s2, sharpe,i)
}
portfolios[[i]] <- c(i,w)
}
dim(port_samples)
knitr::opts_chunk$set(echo = TRUE)
View(port_samples)
knitr::opts_chunk$set(echo = TRUE)
# Gibbs sampler for portfolio Varying Weights
set.seed(876)
n <- nrow(daily_return)
# Create a place for sample data
portfolios <- list()
N_port <- 10
S <- 10000
port_samples <- matrix(NA,S*N_port,4)
colnames(port_samples) <- c("ret","s2","sharpe","port")
# Initial Values
mu1 <- colMeans(daily_return)
cov1 <- cov(daily_return)
port_ret1 <- rowSums(daily_return*w)
w <- runif(C)
w <- w/sum(w)
mu0 <- mean(port_ret1)
s2 <- t(w)%*%cov1%*%w
# Priors
tau_p <- 10
a <- 0.01
b <- 0.01
V <- 1/tau_p
for (i in 1:10){
for (s in 1:S){
P <- n/s2 + V
M <- sum(port_ret1)/s2 + mu0*V
mu <- rnorm(1,M/P, 1/sqrt(P))
A <- n/2 + a
B <- sum((Y-mu)^2)/2 + b
s2 <- 1/rgamma(1,A,B)
sharpe <- mu/sqrt(s2)
port_samples[(s+((i-1)*10000)),] <- c(mu, s2, sharpe,i)
}
portfolios[[i]] <- c(i,w)
}
View(port_samples)
View(portfolios)
View(portfolios[[1]])
knitr::opts_chunk$set(echo = TRUE)
# Gibbs sampler for portfolio Varying Weights
set.seed(876)
n <- nrow(daily_return)
# Create a place for sample data
portfolios <- list()
N_port <- 10
S <- 10000
port_samples <- matrix(NA,S*N_port,4)
colnames(port_samples) <- c("ret","s2","sharpe","port")
# Initial Values
mu1 <- colMeans(daily_return)
cov1 <- cov(daily_return)
port_ret1 <- rowSums(daily_return*w)
w <- runif(C)
w <- w/sum(w)
mu0 <- mean(port_ret1)
s2 <- t(w)%*%cov1%*%w
# Priors
tau_p <- 10
a <- 0.01
b <- 0.01
V <- 1/tau_p
for (i in 1:10){
for (s in 1:S){
P <- n/s2 + V
M <- sum(port_ret1)/s2 + mu0*V
mu <- rnorm(1,M/P, 1/sqrt(P))
A <- n/2 + a
B <- sum((Y-mu)^2)/2 + b
s2 <- 1/rgamma(1,A,B)
sharpe <- mu/sqrt(s2)
port_samples[(s+((i-1)*10000)),] <- c(mu, s2, sharpe,i)
}
portfolios[[i]] <- list(port=i,weights=w)
}
View(port_samples)
View(portfolios)
View(portfolios[[1]])
View(portfolios[[1]]$weights)
knitr::opts_chunk$set(echo = TRUE)
# Gibbs sampler for portfolio Varying Weights
set.seed(876)
n <- nrow(daily_return)
# Create a place for sample data
portfolios <- list()
N_port <- 10
S <- 10000
port_samples <- matrix(NA,S*N_port,4)
colnames(port_samples) <- c("ret","s2","sharpe","port")
# Initial Values
mu1 <- colMeans(daily_return)
cov1 <- cov(daily_return)
port_ret1 <- rowSums(daily_return*w)
w <- runif(C,0,1000)
w <- w/sum(w)
mu0 <- mean(port_ret1)
s2 <- t(w)%*%cov1%*%w
# Priors
tau_p <- 10
a <- 0.01
b <- 0.01
V <- 1/tau_p
for (i in 1:10){
for (s in 1:S){
P <- n/s2 + V
M <- sum(port_ret1)/s2 + mu0*V
mu <- rnorm(1,M/P, 1/sqrt(P))
A <- n/2 + a
B <- sum((Y-mu)^2)/2 + b
s2 <- 1/rgamma(1,A,B)
sharpe <- mu/sqrt(s2)
port_samples[(s+((i-1)*10000)),] <- c(mu, s2, sharpe,i)
}
portfolios[[i]] <- list(port=i,weights=w)
w <- runif(C,0,1000)
w <- w/sum(w)
}
View(port_samples)
View(portfolios[[1]]$weights)
mean(portfolios[[1]]$weights)
var(portfolios[[1]]$weights)
knitr::opts_chunk$set(echo = TRUE)
# Gibbs sampler for portfolio Varying Weights
set.seed(876)
n <- nrow(daily_return)
# Create a place for sample data
portfolios <- list()
N_port <- 10000
S <- 10000
port_samples <- matrix(NA,S*N_port,4)
colnames(port_samples) <- c("ret","s2","sharpe","port")
# Initial Values
mu1 <- colMeans(daily_return)
cov1 <- cov(daily_return)
port_ret1 <- rowSums(daily_return*w)
w <- runif(C,0,1000)
w <- w/sum(w)
mu0 <- mean(port_ret1)
s2 <- t(w)%*%cov1%*%w
# Priors
tau_p <- 10
a <- 0.01
b <- 0.01
V <- 1/tau_p
for (i in 1:N_port){
for (s in 1:S){
P <- n/s2 + V
M <- sum(port_ret1)/s2 + mu0*V
mu <- rnorm(1,M/P, 1/sqrt(P))
A <- n/2 + a
B <- sum((Y-mu)^2)/2 + b
s2 <- 1/rgamma(1,A,B)
sharpe <- mu/sqrt(s2)
port_samples[(s+((i-1)*10000)),] <- c(mu, s2, sharpe,i)
}
portfolios[[i]] <- list(port=i,weights=w)
w <- runif(C,0,1000)
w <- w/sum(w)
}
knitr::opts_chunk$set(echo = TRUE)
# Gibbs sampler for portfolio Varying Weights
set.seed(876)
n <- nrow(daily_return)
# Create a place for sample data
portfolios <- list()
N_port <- 10000
S <- 10000
port_samples <- matrix(NA,S*N_port,4)
colnames(port_samples) <- c("ret","s2","sharpe","port")
# Initial Values
mu1 <- colMeans(daily_return)
cov1 <- cov(daily_return)
port_ret1 <- rowSums(daily_return*w)
w <- runif(C,0,1000)
w <- w/sum(w)
mu0 <- mean(port_ret1)
s2 <- t(w)%*%cov1%*%w
# Priors
tau_p <- 10
a <- 0.01
b <- 0.01
V <- 1/tau_p
for (i in 1:N_port){
for (s in 1:S){
P <- n/s2 + V
M <- sum(port_ret1)/s2 + mu0*V
mu <- rnorm(1,M/P, 1/sqrt(P))
sharpe <- mu/sqrt(s2)
A <- n/2 + a
B <- sum((Y-mu)^2)/2 + b
s2 <- 1/rgamma(1,A,B)
port_samples[(s+((i-1)*10000)),] <- c(mu, s2, sharpe,i)
}
portfolios[[i]] <- list(port=i,weights=w)
w <- runif(C,0,1000)
w <- w/sum(w)
}
knitr::opts_chunk$set(echo = TRUE)
# Gibbs sampler for portfolio Varying Weights
set.seed(876)
n <- nrow(daily_return)
# Create a place for sample data
portfolios <- list()
N_port <- 10000
S <- 10000
port_samples <- matrix(NA,S*N_port,4)
colnames(port_samples) <- c("ret","s2","sharpe","port")
# Initial Values
mu1 <- colMeans(daily_return)
cov1 <- cov(daily_return)
port_ret1 <- rowSums(daily_return*w)
w <- runif(C,0,1000)
w <- w/sum(w)
mu0 <- mean(port_ret1)
s2 <- t(w)%*%cov1%*%w
# Priors
tau_p <- 10
a <- 0.01
b <- 0.01
V <- 1/tau_p
for (i in 1:N_port){
for (s in 1:S){
P <- n/s2 + V
M <- sum(port_ret1)/s2 + mu0*V
mu <- rnorm(1,M/P, 1/sqrt(P))
sharpe <- mu/sqrt(s2)
A <- n/2 + a
B <- sum((Y-mu)^2)/2 + b
s2 <- 1/rgamma(1,A,B)
port_samples[(s+((i-1)*10000)),] <- c(mu, s2, sharpe,i)
}
portfolios[[i]] <- list(port=i,weights=w)
w <- runif(C,0,1000)
w <- w/sum(w)
}
View(port_samples)
rm(port_samples)
knitr::opts_chunk$set(echo = TRUE)
library(rjags)
library(data.table)
library(tidyverse)
library(LaplacesDemon)
library(mvtnorm)
sample <- read.csv("./sample.csv", stringsAsFactors = FALSE)
sample$date <- as.Date(sample$datetime)
sample$symbol <- as.factor(sample$symbol)
justone <- sample[sample$symbol == 'PRTA',]
justone <- justone[1:200,]
add_return_pct <- function(x, y){
df <- x
df$close_30_ago = NA
df$date_30_ago = NA
date_offset <- 22
for (i in (date_offset+1):nrow(df)){
# TODO - do fancy date parsing for more exact offsets
df$date_30_ago[i] <- as.character(df$date[i - date_offset])
df$close_30_ago[i] <- df$close[i - date_offset]
}
df$last_30_return <- df$close / df$close_30_ago - 1
df$annualized_last_30_return = (df$last_30_return + 1) ^ (365/30) - 1
df
}
by_symbol <- sample %>% group_by(symbol) %>% group_map(add_return_pct, keep = TRUE)
# Create data table with 30 day stock returns by ticker name (includes date)
varname <- as.character(by_symbol[[1]]$symbol[1])
stock_returns <- data.table(date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
setnames(stock_returns, "return",paste(varname))
for (i in 2:length(by_symbol)){
varname <- as.character(by_symbol[[i]]$symbol[1])
dt <- data.table(date=by_symbol[[i]]$date, return= by_symbol[[i]]$last_30_return)
setnames(dt, "return",paste(varname))
stock_returns <- full_join(stock_returns,dt, by="date")
}
stock_returns <- na.omit(stock_returns)
############################## GIBBS SAMPLERS BELOW USE DAILY RETURNS######################################
# Daily returns
N <- nrow(by_symbol[[1]])
C <- length(by_symbol)
daily_close <- matrix(NA, N,C+1)
colnames(daily_close) <- c("date",levels(as.factor(sample$symbol)))
daily_close[,"date"] <- by_symbol[[1]]$date
for (i in 1:C){
daily_close[,(i+1)] <- by_symbol[[i]]$close
}
daily_return <- matrix(NA, N, C+1)
colnames(daily_return) <- colnames(daily_close)
daily_return[,1] <- daily_close[,1]
for (j in 2:(C+1)){
for (i in 2:N){
daily_return[i,j] <- 100*(daily_close[i,j] / daily_close[i-1,j]-1)
}
}
daily_return <- daily_return[2:N,2:(C+1)]
# Random walk on stocks *univariate
S <- 10000
ret_samples <- matrix(NA,S,2)
colnames(ret_samples) <- c("E_Y", "s2")
stocks_rw <- list()
for (i in 1:2){
# Data for individual stock
X <- daily_return[1:(N-1),i]
Y <- daily_return[2:N,i]
n <- length(Y)
# Initial values
mu <- mean(Y)
s2 <- var(Y)
# Priors
mu0 <- 0
tau <- 10
a <- 0.01
b <- 0.01
V <- 1/tau
for (s in 1:S){
P <- n/s2 + V
M <- sum(Y-X)/s2 + mu0*V
mu <- rnorm(1,M/P,1/sqrt(P))
A <- n/2 + a
B <- sum((Y-mu)^2)/2 + b
s2 <- 1/rgamma(1,A,B)
ret_samples[i,] <- c(mu, s2)
}
stocks_rw[[i]] <- ret_samples
ret_samples <- matrix(NA,S,2)
colnames(ret_samples) <- c("E_Y", "s2")
}
# Random walk on stocks *univariate
S <- 10000
ret_samples <- matrix(NA,S,2)
colnames(ret_samples) <- c("E_Y", "s2")
N <- nrow(daily_return)
stocks_rw <- list()
for (i in 1:2){
# Data for individual stock
X <- daily_return[1:(N-1),i]
Y <- daily_return[2:N,i]
n <- length(Y)
# Initial values
mu <- mean(Y)
s2 <- var(Y)
# Priors
mu0 <- 0
tau <- 10
a <- 0.01
b <- 0.01
V <- 1/tau
for (s in 1:S){
P <- n/s2 + V
M <- sum(Y-X)/s2 + mu0*V
mu <- rnorm(1,M/P,1/sqrt(P))
A <- n/2 + a
B <- sum((Y-mu)^2)/2 + b
s2 <- 1/rgamma(1,A,B)
ret_samples[i,] <- c(mu, s2)
}
stocks_rw[[i]] <- ret_samples
ret_samples <- matrix(NA,S,2)
colnames(ret_samples) <- c("E_Y", "s2")
}
View(stocks_rw)
View(ret_samples)
# Random walk on stocks *univariate
S <- 10000
ret_samples <- matrix(NA,S,2)
colnames(ret_samples) <- c("E_Y", "s2")
N <- nrow(daily_return)
stocks_rw <- list()
for (i in 1:2){
# Data for individual stock
X <- daily_return[1:(N-1),i]
Y <- daily_return[2:N,i]
n <- length(Y)
# Initial values
mu <- mean(Y)
s2 <- var(Y)
# Priors
mu0 <- 0
tau <- 10
a <- 0.01
b <- 0.01
V <- 1/tau
for (s in 1:S){
P <- n/s2 + V
M <- sum(Y-X)/s2 + mu0*V
mu <- rnorm(1,M/P,1/sqrt(P))
A <- n/2 + a
B <- sum((Y-mu)^2)/2 + b
s2 <- 1/rgamma(1,A,B)
ret_samples[s,] <- c(mu, s2)
}
stocks_rw[[i]] <- ret_samples
ret_samples <- matrix(NA,S,2)
colnames(ret_samples) <- c("E_Y", "s2")
}
View(ret_samples)
View(ret_samples)
View(stocks_rw[[1]])
View(stocks_rw[[2]])
plot(1:S,stocks_rw[[1]]$E_Y, type = "l")
plot(1:S,stocks_rw[[1]][,1], type = "l")
plot(1:S,stocks_rw[[1]][,2], type = "l")
plot(1:S,stocks_rw[[2]][,2], type = "l")
plot(1:S,stocks_rw[[2]][,1], type = "l")
colMeans(stocks_rw[[1]])
View(daily_return)
# Random walk on stocks *univariate
S <- 10000
ret_samples <- matrix(NA,S,2)
colnames(ret_samples) <- c("E_Y", "s2")
N <- nrow(daily_return)
stocks_rw <- list()
for (i in 1:C){
# Data for individual stock
X <- daily_return[1:(N-1),i]
Y <- daily_return[2:N,i]
n <- length(Y)
# Initial values
mu <- mean(Y)
s2 <- var(Y)
# Priors
mu0 <- 0
tau <- 10
a <- 0.01
b <- 0.01
V <- 1/tau
for (s in 1:S){
P <- n/s2 + V
M <- sum(Y-X)/s2 + mu0*V
mu <- rnorm(1,M/P,1/sqrt(P))
A <- n/2 + a
B <- sum((Y-mu)^2)/2 + b
s2 <- 1/rgamma(1,A,B)
ret_samples[s,] <- c(mu, s2)
}
stocks_rw[[i]] <- ret_samples
ret_samples <- matrix(NA,S,2)
colnames(ret_samples) <- c("E_Y", "s2")
}
?ln
?log
source('~/Documents/bayesian-portfolio/models_draft_2.R')
source('~/Documents/bayesian-portfolio/models_draft_2.R')
save.image("~/Documents/bayesian-portfolio/Random_walk_data.RData")
