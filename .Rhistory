<<<<<<< HEAD
}
justone
?mean
?dcast
knitr::opts_chunk$set(echo = TRUE)
library(rjags)
library(magrittr)
library(tidyverse)
library(data.table)
df <- read.csv("~/Personal/bayesian-portfolio/df.csv", stringsAsFactors = FALSE)
df <- read.csv("~/Documents/bayes_porfolio/bayesian-portfolio/df.csv", stringsAsFactors = FALSE)
df <- read.csv("~/Documents/bayes_porfolio/bayesian-portfolio/sample.csv", stringsAsFactors = FALSE)
df <- read.csv("~/Documents/bayes_porfolio/bayesian-portfolio/sample.csv", stringsAsFactors = FALSE)
df <- read.csv("~/Documents/bayes_portfolio/bayesian-portfolio/sample.csv", stringsAsFactors = FALSE)
df$date <- as.Date(df$datetime)
justone <- df[df$symbol == 'PRTA',]
justone <- justone[1:200,]
for (i in 30:nrow(justone)){
target <- justone$date[i] - as.difftime(31, unit="days")
#found <- justone[justone$datetime > target, 'datetime']
print(justone$date[i])
print(target)
print("\n")
}
justone
sample <- read.csv("~/Personal/bayesian-portfolio/sample.csv", stringsAsFactors = FALSE)
sample <- read.csv("~/Documents/bayes_portfolio/bayesian-portfolio/sample.csv", stringsAsFactors = FALSE)
sample$date <- as.Date(sample$datetime)
sample$symbol <- as.factor(sample$symbol)
justone <- sample[sample$symbol == 'PRTA',]
justone <- justone[1:200,]
add_return_pct <- function(x, y){
df <- x
df$close_30_ago = NA
df$date_30_ago = NA
date_offset <- 22
for (i in (date_offset+1):nrow(df)){
# TODO - do fancy date parsing for more exact offsets
df$date_30_ago[i] <- as.character(df$date[i - date_offset])
df$close_30_ago[i] <- df$close[i - date_offset]
}
df$last_30_return <- df$close / df$close_30_ago - 1
df$annualized_last_30_return = (df$last_30_return + 1) ^ (365/30) - 1
df
}
by_symbol <- sample %>% group_by(symbol) %>% group_map(add_return_pct, keep = TRUE)
by_symbol
View(by_symbol)
View(by_symbol)
by_symbol[[1]]
str(by_symbol[[1]])
by_symbol[[1]]
x <- data.table(ticker =by_symbol[[1]]$symbol ,data=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
x
dim(by_symbol)
length(by_symbol)
#for (i in 1:length(by_symbol)){
test <- data.table()
for (i in 1:2){
x <- data.table(ticker =by_symbol[[i]]$symbol ,data=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
test <- cbind(test, x)
}
?cbind2()
?plyr::cbind.fill
#for (i in 1:length(by_symbol)){
test <- data.table()
for (i in 1:2){
x <- data.table(ticker =by_symbol[[i]]$symbol ,data=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
test <- cbind.fill(test, x)
}
#for (i in 1:length(by_symbol)){
test <- data.table()
for (i in 1:2){
x <- data.table(ticker =by_symbol[[i]]$symbol ,data=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
test <- plyr::cbind.fill(test, x)
}
?left_join()
#for (i in 1:length(by_symbol)){
test <- data.table()
for (i in 1:2){
x <- data.table(ticker =by_symbol[[i]]$symbol ,data=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
test <- left_join(test,x, by=date)
}
#for (i in 1:length(by_symbol)){
test <- data.table()
for (i in 1:2){
x <- data.table(ticker =by_symbol[[i]]$symbol ,data=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
test <- left_join(test,x, by="date")
}
min(sample$date)
test <- data.table(date=c(min(sample$date):max(sample$date)))
#for (i in 1:length(by_symbol)){
test <- data.table(date=c(min(sample$date):max(sample$date)))
for (i in 1:2){
x <- data.table(ticker =by_symbol[[i]]$symbol ,data=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
test <- left_join(test,x, by="date")
}
#for (i in 1:length(by_symbol)){
test <- data.table(date=c(min(sample$date):max(sample$date)))
for (i in 1:2){
x <- data.table(ticker =by_symbol[[i]]$symbol ,date=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
test <- left_join(test,x, by="date")
}
#for (i in 1:length(by_symbol)){
test <- data.table(date=c(min(sample$date):max(sample$date)))
for (i in 1:2){
x <- data.table(ticker =by_symbol[[i]]$symbol ,date=as.Date(by_symbol[[i]]$date), return=by_symbol[[i]]$last_30_return)
test <- left_join(test,x, by="date")
}
#for (i in 1:length(by_symbol)){
test <- data.table(date=as.Date(c(min(sample$date):max(sample$date))))
#for (i in 1:length(by_symbol)){
test <- data.table(date=as.Date(c(min(sample$date):max(sample$date))))
#for (i in 1:length(by_symbol)){
test <- data.table(date=as.Date(c(min(sample$date):max(sample$date))))
test <- data.table(date=as.Date(c(min(sample$date):max(sample$date))))
?as.Date
test <- data.table(date=c(min(sample$date):max(sample$date)))
test$date <- as.character(test$date)
test <- data.table(date=c(min(sample$date):max(sample$date)))
test$date <- as.Date.character(test$date)
?as.Date.character
x
test$date <- as.Date.character(test$date,format = "%Y-%m-%d")
for (i in 1:2){
x <- data.table(ticker =by_symbol[[i]]$symbol ,date=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
test <- left_join(test,x, by="date")
}
#for (i in 1:length(by_symbol)){
test <- data.table(date=c(min(sample$date):max(sample$date)))
test$date <- as.Date.character(test$date,format = "%Y-%m-%d")
for (i in 1:2){
x <- data.table(ticker =by_symbol[[i]]$symbol ,date=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
test <- left_join(test,x, by="date")
}
x
test
View(test)
x
for (i in 2:3){
y <- data.table(ticker =by_symbol[[i]]$symbol ,date=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
test <- left_join(test,x, by="date")
}
test <- left_join(x,y, by="date")
View(test)
stock_returns <- data.table(ticker =by_symbol[[1]]$symbol ,date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
stock_returns <- data.table(ticker =by_symbol[[1]]$symbol ,date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
for (i in 2:4){
x <- data.table(ticker =by_symbol[[i]]$symbol ,date=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
stock_returns <- left_join(stock_returns,y, by="date")
}
length(by_symbol)
#for (i in 1:length(by_symbol)){
#test <- data.table(date=c(min(sample$date):max(sample$date)))
#test$date <- as.Date.character(test$date,format = "%Y-%m-%d")
stock_returns <- data.table(ticker =by_symbol[[1]]$symbol ,date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
for (i in 2:length(by_symbol)){
x <- data.table(ticker =by_symbol[[i]]$symbol ,date=by_symbol[[i]]$date, return=by_symbol[[i]]$last_30_return)
stock_returns <- left_join(stock_returns,y, by="date")
}
test
x
View(stock_returns)
for (i in 2:length(by_symbol)){
x <- data.table(date=by_symbol[[i]]$date, by_symbol[[i]]$symbol[1]=by_symbol[[i]]$last_30_return)
varname <- by_symbol[[i]]$symbol[1]
varname
varname <- as.character(by_symbol[[i]]$symbol[1])
varname
for (i in 2:length(by_symbol)){
varname <- as.character(by_symbol[[i]]$symbol[1])
dt <- data.table(date=by_symbol[[i]]$date, !!varname :=by_symbol[[i]]$last_30_return)
stock_returns <- left_join(stock_returns,x, by="date")
}
?mutate
?assign
#for (i in 1:length(by_symbol)){
#test <- data.table(date=c(min(sample$date):max(sample$date)))
#test$date <- as.Date.character(test$date,format = "%Y-%m-%d")
stock_returns <- data.table(ticker =by_symbol[[1]]$symbol ,date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
for (i in 2:length(by_symbol)){
varname <- as.character(by_symbol[[i]]$symbol[1])
dt <- data.table(date=by_symbol[[i]]$date, assign(varname,by_symbol[[i]]$last_30_return))
stock_returns <- left_join(stock_returns,x, by="date")
}
View(stock_returns)
stock_returns <- data.table(ticker =by_symbol[[1]]$symbol ,date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
View(stock_returns)
stock_returns <- data.table(date=by_symbol[[i]]$date, assign(as.character(by_symbol[[1]]$symbol[1]),by_symbol[[i]]$last_30_return))
View(stock_returns)
varname <- as.character(by_symbol[[i]]$symbol[1])
stock_returns <- data.table(date=by_symbol[[i]]$date, assign(varname,by_symbol[[i]]$last_30_return))
View(stock_returns)
varname
varname <- as.character(by_symbol[[1]]$symbol[1])
varname
stock_returns <- data.table(date=by_symbol[[1]]$date, assign(varname,by_symbol[[1]]$last_30_return))
View(stock_returns)
stock_returns <- data.table(date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return))
stock_returns <- data.table(date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
assign(varname, stock_returns$return)
View(stock_returns)
View(stock_returns)
setnames(stock_returns, "return",paste(varname))
View(stock_returns)
varname <- as.character(by_symbol[[i]]$symbol[1])
varname
dt <- data.table(date=by_symbol[[i]]$date, assign(varname,by_symbol[[i]]$last_30_return))
setnames(dt, "return",paste(varname))
dt <- data.table(date=by_symbol[[i]]$date, return= by_symbol[[i]]$last_30_return)
setnames(dt, "return",paste(varname))
View(dt)
stock_returns <- left_join(stock_returns,x, by="date")
View(stock_returns)
varname <- as.character(by_symbol[[1]]$symbol[1])
stock_returns <- data.table(date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
setnames(stock_returns, "return",paste(varname))
varname <- as.character(by_symbol[[i]]$symbol[1])
dt <- data.table(date=by_symbol[[i]]$date, return= by_symbol[[i]]$last_30_return)
setnames(dt, "return",paste(varname))
stock_returns <- left_join(stock_returns,dt, by="date")
View(stock_returns)
#for (i in 1:length(by_symbol)){
#test <- data.table(date=c(min(sample$date):max(sample$date)))
#test$date <- as.Date.character(test$date,format = "%Y-%m-%d")
varname <- as.character(by_symbol[[1]]$symbol[1])
stock_returns <- data.table(date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
setnames(stock_returns, "return",paste(varname))
for (i in 2:length(by_symbol)){
varname <- as.character(by_symbol[[i]]$symbol[1])
dt <- data.table(date=by_symbol[[i]]$date, return= by_symbol[[i]]$last_30_return)
setnames(dt, "return",paste(varname))
stock_returns <- left_join(stock_returns,dt, by="date")
}
View(stock_returns)
sample <- read.csv("~/Documents/bayes_portfolio/bayesian-portfolio/sample.csv", stringsAsFactors = FALSE)
sample$date <- as.Date(sample$datetime)
sample$symbol <- as.factor(sample$symbol)
justone <- sample[sample$symbol == 'PRTA',]
justone <- justone[1:200,]
add_return_pct <- function(x, y){
df <- x
df$close_30_ago = NA
df$date_30_ago = NA
date_offset <- 22
for (i in (date_offset+1):nrow(df)){
# TODO - do fancy date parsing for more exact offsets
df$date_30_ago[i] <- as.character(df$date[i - date_offset])
df$close_30_ago[i] <- df$close[i - date_offset]
}
df$last_30_return <- df$close / df$close_30_ago - 1
df$annualized_last_30_return = (df$last_30_return + 1) ^ (365/30) - 1
df
}
by_symbol <- sample %>% group_by(symbol) %>% group_map(add_return_pct, keep = TRUE)
by_symbol
# Create data table with 30 day stock returns by ticker name (includes date)
varname <- as.character(by_symbol[[1]]$symbol[1])
stock_returns <- data.table(date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
setnames(stock_returns, "return",paste(varname))
for (i in 2:length(by_symbol)){
varname <- as.character(by_symbol[[i]]$symbol[1])
dt <- data.table(date=by_symbol[[i]]$date, return= by_symbol[[i]]$last_30_return)
setnames(dt, "return",paste(varname))
stock_returns <- left_join(stock_returns,dt, by="date")
}
View(stock_returns)
setwd("~/Documents/bayesian-portfolio")
View(stock_returns)
knitr::opts_chunk$set(echo = TRUE)
library(rjags)
library(magrittr)
library(tidyverse)
library(data.table)
# Create data table with 30 day stock returns by ticker name (includes date)
varname <- as.character(by_symbol[[1]]$symbol[1])
stock_returns <- data.table(date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
setnames(stock_returns, "return",paste(varname))
for (i in 2:length(by_symbol)){
varname <- as.character(by_symbol[[i]]$symbol[1])
dt <- data.table(date=by_symbol[[i]]$date, return= by_symbol[[i]]$last_30_return)
setnames(dt, "return",paste(varname))
stock_returns <- full_join(stock_returns,dt, by="date")
}
View(stock_returns)
# Create data table with 30 day stock returns by ticker name (includes date)
varname <- as.character(by_symbol[[1]]$symbol[1])
stock_returns <- data.table(date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
setnames(stock_returns, "return",paste(varname))
for (i in 2:length(by_symbol)){
varname <- as.character(by_symbol[[i]]$symbol[1])
dt <- data.table(date=by_symbol[[i]]$date, return= by_symbol[[i]]$last_30_return)
setnames(dt, "return",paste(varname))
stock_returns <- full_join(stock_returns,dt, by="date")
}
View(stock_returns)
View(sample)
cov(stock_returns)
test <- as.matrix(stock_returns[,2:ncol(stock_returns)])
cov(test)
?var
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
sample <- read.csv("~/Documents/bayes_portfolio/bayesian-portfolio/sample.csv", stringsAsFactors = FALSE)
knitr::opts_chunk$set(echo = TRUE)
sample <- read.csv("~/Documents/bayesian-portfolio/sample.csv", stringsAsFactors = FALSE)
sample$date <- as.Date(sample$datetime)
sample$symbol <- as.factor(sample$symbol)
justone <- sample[sample$symbol == 'PRTA',]
justone <- justone[1:200,]
add_return_pct <- function(x, y){
df <- x
df$close_30_ago = NA
df$date_30_ago = NA
date_offset <- 22
for (i in (date_offset+1):nrow(df)){
# TODO - do fancy date parsing for more exact offsets
df$date_30_ago[i] <- as.character(df$date[i - date_offset])
df$close_30_ago[i] <- df$close[i - date_offset]
}
df$last_30_return <- df$close / df$close_30_ago - 1
df$annualized_last_30_return = (df$last_30_return + 1) ^ (365/30) - 1
df
}
by_symbol <- sample %>% group_by(symbol) %>% group_map(add_return_pct, keep = TRUE)
# Create data table with 30 day stock returns by ticker name (includes date)
varname <- as.character(by_symbol[[1]]$symbol[1])
stock_returns <- data.table(date=by_symbol[[1]]$date, return=by_symbol[[1]]$last_30_return)
setnames(stock_returns, "return",paste(varname))
for (i in 2:length(by_symbol)){
varname <- as.character(by_symbol[[i]]$symbol[1])
dt <- data.table(date=by_symbol[[i]]$date, return= by_symbol[[i]]$last_30_return)
setnames(dt, "return",paste(varname))
stock_returns <- full_join(stock_returns,dt, by="date")
}
View(stock_returns)
knitr::opts_chunk$set(echo = TRUE)
stock_returns <- omit.na(stock_returns)
knitr::opts_chunk$set(echo = TRUE)
stock_returns <- na.omit(stock_returns)
knitr::opts_chunk$set(echo = TRUE)
test <- stock_returns[,drop(-1)]
View(test)
knitr::opts_chunk$set(echo = TRUE)
covmat <- cov(stock_returns[,drop(-1)])
knitr::opts_chunk$set(echo = TRUE)
View(covmat)
knitr::opts_chunk$set(echo = TRUE)
# Some random parameters
T <- nrow(stock_returns)
N <- ncol(stock_returns)
# Create covariance matrix
covmat <- cov(stock_returns[,drop(-1)])
# Create vector of weights
w <- runif(N, 0,100)
w <- w/sum(w)
sum(w)
knitr::opts_chunk$set(echo = TRUE)
# Some random parameters
T <- nrow(stock_returns)
N <- ncol(stock_returns)
# Create covariance matrix
covmat <- cov(stock_returns[,drop(-1)])
# Create Random vector of weights
w <- runif(N, 0,100)
w <- w/sum(w)
# Expected returns
e_returns <- colMeans(stock_returns[,drop(-1)])
# Expected portfolio return
e_port_return <- w*e_returns
# Portfolio Variance
port_var <- tr(w)%*%covmat%*%w
knitr::opts_chunk$set(echo = TRUE)
# Some random parameters
T <- nrow(stock_returns)
N <- ncol(stock_returns)
# Create covariance matrix
covmat <- cov(stock_returns[,drop(-1)])
# Create Random vector of weights
w <- runif(N, 0,100)
w <- w/sum(w)
# Expected returns
e_returns <- colMeans(stock_returns[,drop(-1)])
# Expected portfolio return
e_port_return <- w*e_returns
# Portfolio Variance
port_var <- t(w)%*%covmat%*%w
knitr::opts_chunk$set(echo = TRUE)
# Some random parameters
T <- nrow(stock_returns)
N <- ncol(stock_returns[,drop(-1)])
# Create covariance matrix
covmat <- cov(stock_returns[,drop(-1)])
# Create Random vector of weights
w <- runif(N, 0,100)
w <- w/sum(w)
# Expected returns
e_returns <- colMeans(stock_returns[,drop(-1)])
# Expected portfolio return
e_port_return <- w*e_returns
# Portfolio Variance
port_var <- t(w)%*%covmat%*%w
# Sharpe ratio
sharpe <- e_port_return * sqrt((t(w)%*%solve(covmat)%*%w))
# Some random parameters
T <- nrow(stock_returns)
N <- ncol(stock_returns[,drop(-1)])
# Create covariance matrix
covmat <- cov(stock_returns[,drop(-1)])
# Create Random vector of weights
w <- runif(N, 0,100)
w <- w/sum(w)
# Expected returns
e_returns <- colMeans(stock_returns[,drop(-1)])
# Expected portfolio return
e_port_return <- w*e_returns
# Portfolio Variance
port_var <- t(w)%*%covmat%*%w
# Sharpe ratio
sharpe <- e_port_return * sqrt((t(w)%*%solve(covmat)%*%w))
knitr::opts_chunk$set(echo = TRUE)
# Sharpe ratio
sharpe <- sqrt((t(w)%*%solve(covmat)%*%w))
knitr::opts_chunk$set(echo = TRUE)
sharpe
knitr::opts_chunk$set(echo = TRUE)
# Sharpe ratio
sharpe <- e_port_return / sqrt(port_var)
knitr::opts_chunk$set(echo = TRUE)
port_var
knitr::opts_chunk$set(echo = TRUE)
e_port_return
knitr::opts_chunk$set(echo = TRUE)
# Some random parameters
T <- nrow(stock_returns)
N <- ncol(stock_returns[,drop(-1)])
# Create covariance matrix
covmat <- cov(stock_returns[,drop(-1)])
# Create Random vector of weights
w <- runif(N, 0,100)
w <- w/sum(w)
# Expected returns
e_returns <- colMeans(stock_returns[,drop(-1)])
# Expected portfolio return
e_port_return <- sum(w*e_returns)
# Portfolio Variance
port_var <- t(w)%*%covmat%*%w
# Sharpe ratio
sharpe <- e_port_return / sqrt(port_var)
sharpe
port_var
e_port_return
knitr::opts_chunk$set(echo = TRUE)
X <- as.matrix(stock_returns[,drop(-1)])
knitr::opts_chunk$set(echo = TRUE)
tXX <- t(X)%*%X
knitr::opts_chunk$set(echo = TRUE)
View(tXX)
knitr::opts_chunk$set(echo = TRUE)
isSymmetric.matrix(tXX)
knitr::opts_chunk$set(echo = TRUE)
omega <- solve(covmat)
knitr::opts_chunk$set(echo = TRUE)
# Degrees of freedom
df <- sum(diag(covmat))/port_var
knitr::opts_chunk$set(echo = TRUE)
# Scale matrix
scale <- diag(N)
?diwish
install.packages("MCMCpack")
install.packages("LaplacesDemon")
library(LaplacesDemon)
knitr::opts_chunk$set(echo = TRUE)
Diwish <- dinvwishart(covmat, df, scale)
View(Diwish)
View(scale)
knitr::opts_chunk$set(echo = TRUE)
Diwish <- dinvwishart(omega, df, scale)
knitr::opts_chunk$set(echo = TRUE)
Diwish <- dinvwishart(covmat, df, scale)
knitr::opts_chunk$set(echo = TRUE)
Diwish <-
dinvwishart(covmat, df, scale)
knitr::opts_chunk$set(echo = TRUE)
#Diwish <-
dinvwishart(covmat, df, scale)
knitr::opts_chunk$set(echo = TRUE)
prior <- rinvwishart(df,scale)
View(prior)
df
46*46
knitr::opts_chunk$set(echo = TRUE)
mat1 <- t(w)%*%covmat%*%w
mat2 <- t(w)%*%solve(covmat)%*%w
1/mat1
mat2
knitr::opts_chunk$set(echo = TRUE)
mat1 <- t(w)%*%covmat%*%w
mat2 <- t(w)%*%solve(covmat)%*%w
mat1
mat2
knitr::opts_chunk$set(echo = TRUE)
mat2 <- solve(covmat)
knitr::opts_chunk$set(echo = TRUE)
1/mat1
knitr::opts_chunk$set(echo = TRUE)
1/t(w)%*%solve(mat2)%*%w
knitr::opts_chunk$set(echo = TRUE)
mat1 <- t(w)%*%covmat%*%w
mat2 <- solve(covmat)
1/t(w)%*%solve(mat2)%*%w
1/mat1
=======
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 2:k){
lines(X[,1], X[,i], col= i)
x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
y <- X[n,i]
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
legend("topright", line_labels, col = 2:k, lty = 1)
# Line plots of daily prices
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 2:k){
lines(X[,1], X[,i], col= i)
x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
y <- X[n,i]
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
legend("topleft", line_labels, col = 2:k, lty = 1)
# Line plots of daily prices
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 2:2){
lines(X[,1], X[,i], col= i)
x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
y <- X[n,i]
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
legend("topleft", line_labels, col = 2:k, lty = 1)
# Line plots of daily prices
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 1:1){
lines(X[,1], X[,i], col= i)
x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
y <- X[n,i]
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
legend("topleft", line_labels, col = 2:k, lty = 1)
# Line plots of daily prices
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 1:2){
lines(X[,1], X[,i], col= i)
x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
y <- X[n,i]
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
legend("topleft", line_labels, col = 2:k, lty = 1)
# Line plots of daily prices
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 2:3){
lines(X[,1], X[,i], col= i)
x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
y <- X[n,i]
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
legend("topleft", line_labels, col = 2:k, lty = 1)
colnames(X)
# Line plots of daily prices
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 3:4){
lines(X[,1], X[,i], col= i)
x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
y <- X[n,i]
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
legend("topleft", line_labels, col = 2:k, lty = 1)
# Line plots of daily prices
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 4:5){
lines(X[,1], X[,i], col= i)
x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
y <- X[n,i]
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
legend("topleft", line_labels, col = 2:k, lty = 1)
# Line plots of daily prices
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 6:7){
lines(X[,1], X[,i], col= i)
x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
y <- X[n,i]
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
legend("topleft", line_labels, col = 2:k, lty = 1)
# Line plots of daily prices
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 6:6){
lines(X[,1], X[,i], col= i)
x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
y <- X[n,i]
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
legend("topleft", line_labels, col = 2:k, lty = 1)
# Line plots of daily prices
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 7:7){
lines(X[,1], X[,i], col= i)
x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
y <- X[n,i]
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
legend("topleft", line_labels, col = 2:k, lty = 1)
View(X)
View(X[,1])
View(X[,2])
View(X[,3])
# Line plots of daily prices
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 2:7){
lines(X[,1], X[,i], col= i)
x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
y <- X[n,i]
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
legend("topleft", line_labels, col = 2:k, lty = 1)
# Line plots of daily prices
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 2:7){
lines(X[,1], X[,i], col= i)
x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
y <- X[n,i]
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
legend("topleft", line_labels[2:k], col = 2:k, lty = 1)
X[,1] <- as.Date.character(X[,1],format = c(%Y-%M-%D))
X[,1] <- as.Date.character(X[,1],format = c(%Y-%m-%d))
?as.Date.character
X[,1] <- as.Date.character(X[,1],format = c("%Y-%m-%d"))
# Line plots of daily prices
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
X <- daily_close
# Line plots of daily prices
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 2:7){
lines(X[,1], X[,i], col= i)
x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
y <- X[n,i]
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
legend("topleft", line_labels[2:k], col = 2:k, lty = 1)
# Line plots of daily prices
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 2:7){
lines(as.Date.character(X[,1], format = c("%Y-%m-%d")), X[,i], col= i)
x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
y <- X[n,i]
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
legend("topleft", line_labels[2:k], col = 2:k, lty = 1)
# Line plots of daily prices
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 2:7){
lines(as.Date(X[,1],"%Y-%m-%d"), X[,i], col= i)
x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
y <- X[n,i]
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
# Line plots of daily prices
plot(NA, xlim = as.Date(c(X[1,1], X[n,1]+60),"%Y/%m/%d"), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
X <- daily_close
X[,1] <- as.Date(X[,1],format = c("%Y-%m-%d"))
X[,1] <- as.Date(X[,1],"%Y-%m-%d")
?as.Date
X <- daily_close
X[,1] <- as.Date.character(X[,1],format = c("%Y-%m-%d"))
n <- nrow(X)
k <- ncol(X)
# Stock names
line_labels <- colnames(X)
# Line plots of daily prices
plot(NA, xlim = as.Date(c(X[1,1], X[n,1]+60),"%Y/%m/%d"), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
# Line plots of daily prices
plot(NA, xlim = (c(as.Date(X[1,1],"%Y/%m/%d"), as.Date((X[n,1]+60),"%Y/%m/%d")), ylim = range(X[,2:k]),
# Line plots of daily prices
plot(NA, xlim = c(as.Date(X[1,1],"%Y/%m/%d"), as.Date((X[n,1]+60),"%Y/%m/%d")), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
# Line plots of daily prices
plot(NA, xlim = (c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
# Line plots of daily prices
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
X <- as.data.frame(daily_close)
X[,1] <- as.Date.character(X[,1],format = c("%Y-%m-%d"))
n <- nrow(X)
k <- ncol(X)
# Stock names
line_labels <- colnames(X)
# Line plots of daily prices
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
X <- as.data.frame(daily_close)
#X[,1] <- as.Date.character(X[,1],format = c("%Y-%m-%d"))
n <- nrow(X)
k <- ncol(X)
# Stock names
line_labels <- colnames(X)
# Line plots of daily prices
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 2:7){
lines(as.Date(X[,1],"%Y-%m-%d"), X[,i], col= i)
x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
y <- X[n,i]
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
# Line plots of daily prices
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 2:7){
lines(X[,1], X[,i], col= i)
x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
y <- X[n,i]
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
legend("topleft", line_labels[2:k], col = 2:k, lty = 1)
# Plot the logged prices
X <- log(X)
plot(NA, xlim = range(X[,1]), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 2:k){
lines(X[,1], X[,i], col= i)
x <- round((max(X[,1])-rnorm(1,80,5))- runif(1,0, 45),0)
x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
# Plot the logged prices
X <- log(X)
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
# Plot the logged prices
X[,2:k] <- log(daily_close[,2:k])
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 2:7){
lines(X[,1], X[,i], col= i)
x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
y <- X[n,i]
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
legend("topleft", line_labels[2:k], col = 2:k, lty = 1)
# Plot the logged prices
X <- daily_close
X[,2:k] <- log(daily_close[,2:k])
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 2:7){
lines(X[,1], X[,i], col= i)
x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
y <- X[n,i]
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
legend("topleft", line_labels[2:k], col = 2:k, lty = 1)
# Plot the first difference of price
X <- daily_close
X[2:n,2:k] <- X[2:n,2:k]-X[1:n-1,2:k]
X <- X[2:n,]
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
View(X)
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
# Plot the first difference of price
X <- daily_close
X[2:n,2:k] <- X[2:n,2:k]-X[1:n-1,2:k]
X <- X[2:n,]
n <- nrow(X)
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 2:7){
lines(X[,1], X[,i], col= i)
x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
y <- X[n,i]
text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
#legend("topleft", line_labels[2:k], col = 2:k, lty = 1)
?legend
# Plot the first difference of price
X <- daily_close
X[2:n,2:k] <- X[2:n,2:k]-X[1:n-1,2:k]
X <- X[2:n,]
n <- nrow(X)
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 2:7){
lines(X[,1], X[,i], col= i)
#x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
#y <- X[n,i]
#text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
legend("topleft", line_labels[2:k], col = 2:k, lty = 1, bty="n")
# Plot the first difference of price
X <- daily_close
X[2:n,2:k] <- X[2:n,2:k]-X[1:n-1,2:k]
X <- X[2:n,]
n <- nrow(X)
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 2:7){
lines(X[,1], X[,i], col= i)
#x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
#y <- X[n,i]
#text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
legend("topright", line_labels[2:k], col = 2:k, lty = 1, bty="n", cex = 0.6)
# Plot the logged first difference of price
X <- daily_close
n <- nrow(X)
X[,2:k] <- log(daily_close[,2:k])
X[2:n,2:k] <- X[2:n,2:k]-X[1:n-1,2:k]
X <- X[2:n,]
n <- nrow(X)
plot(NA, xlim = c(X[1,1], X[n,1]+60), ylim = range(X[,2:k]),
main ="Stock Prices", xlab="Date", ylab = "Price", type = "n")
for (i in 2:7){
lines(X[,1], X[,i], col= i)
#x <- round(max(X[,1]) + runif(1,0, 45),0)
#x2 <- ifelse(length(which(X[,1]==x))==0,which(X[,1]==(x+3)),which(X[,1]==x))
#y <- ifelse(is.null(X[x2,i]+10),X[x2+3,i],X[x2,i])
#y <- X[n,i]
#text(x, y, labels = line_labels[i], cex=.6, col = 1)
}
legend("topright", line_labels[2:k], col = 2:k, lty = 1, bty="n", cex = 0.6)
source('~/Documents/bayesian-portfolio/models_draft_2.R')
View(stocks_rw)
View(stocks_rw[[1]]$P_Y)
source('~/Documents/bayesian-portfolio/models_draft_2.R')
source('~/Documents/bayesian-portfolio/models_draft_2.R')
View(stocks_rw[[1]]$P_Y)
View(stocks_rw[[1]]$covmat)
View(stocks_rw[[1]]$epsilon)
View(stocks_rw[[1]]$avg_returns)
exp(stocks_rw[[1]]$avg_returns)
exp(stocks_rw[[1]]$avg_returns)-1
round(exp(stocks_rw[[1]]$avg_returns)-1,2)
round(exp(stocks_rw[[1]]$avg_returns)-1,4)
colMeans(Y-X)
exp(colMeans(Y-X))-1
# Multivariate Random walk for model for fitting daily stock returns.
S <- 10
N <- nrow(daily_close)
C <- ncol(daily_close)
stocks_rw <- list()
# Data
X <- log(daily_close[1:(N-1),2:C])
Y <- log(daily_close[2:N,2:C])
# Let Y take the value of the first difference
Y <- Y-X
n <- nrow(Y)
c <- ncol(Y)
# Initial values
covmat <- cov(Y)
mu <- colMeans(Y)
# Priors
mu0 <- rep(0,c)
tau <- 10
V <- diag(c)/tau
P_Y <- matrix(NA,n,c)
avg_errors <- matrix(S,n,c)
P <- covmat + V
M <- mu + mu0
alpha <- rmvnorm(1,mu,P)
test <- Y-alpha
View(Y)
View(alpha)
test <- t(Y)-alpha
test <- t(Y)-as.vector(alpha)
View(test)
test <- Y - t(alpha)
dif <- t(y)-aplha
dif <- t(y)-alpha
dif <- t(y)-as.vector(alpha)
dif <- t(Y)-as.vector(alpha)
sq_dif <- dif%*%t(dif)
View(sq_dif)
View(dif)
dif <- t(t(Y)-as.vector(alpha))
View(dif)
dif <- dif^2
View(dif)
dif <- t(t(Y)-as.vector(alpha))
sq_dif <- dif%*%t(dif)
View(sq_dif)
dif <- t(t(Y)-as.vector(alpha))
sq_dif <- t(dif)%*%dif
View(sq_dif)
diag(sq_dif)
test <- Y[,1]-mu[1]
View(test)
test[,1] <- test[,1]^2
test <- as.data.frame(test)
View(test)
test$test <- test$test^2
sum(test$test)
A <- matrix(c(4,5,6,7),2,2)
A
A <- matrix(c(4,5,6,7,2,7),3,2)
a2 <- c(3,5)
A-a2
A
a2
A-a2
A - as.vector(a2)
t(t(A)-a2)
A
A <- t(t(A)-a2)
A
A^2
colSums(A^2)
diag(t(A)%*%A)
diag(t(A)%*%A)/2
# Initial values
covmat <- cov(Y)
View(covmat)
?rmvnorm
# Priors
A <- t(Y)%*%Y
View(A)
source('~/Documents/bayesian-portfolio/models_draft_2.R')
dim(covmat)
test <- matrix(covmat, 1,c*c)
View(test)
stocks_rw <- matrix(NA,S,c+c*c)
source('~/Documents/bayesian-portfolio/models_draft_2.R')
View(stocks_rw)
View(covmat)
View(X)
stock_names <- colnames(X)
cov_names <- NULL
for (i in 1:c){
for (j in 1:c){
cov_names[j+c*(i-1)] <- paste0(stock_names[i],"-",stock_names[j])
}
}
cov_names
stock_names
View(covmat)
View(Y)
test <- cov(Y)
View(test)
source('~/Documents/bayesian-portfolio/models_draft_2.R')
View(stocks_rw)
source('~/Documents/bayesian-portfolio/models_draft_2.R')
colMeans(stocks_rw[,1:c])
plot(1:S,stocks_rw[,1], typle="l")
plot(1:S,stocks_rw[,1], type="l")
warnings()
source('~/Documents/bayesian-portfolio/models_draft_2.R')
source('~/Documents/bayesian-portfolio/models_draft_2.R')
source('~/Documents/bayesian-portfolio/models_draft_2.R')
plot(1:S,stocks_rw[,1], type="l")
>>>>>>> master
