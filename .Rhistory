######### TO DO ##########################
# Can you fix the weights to iterate over a gradient? Right now it is just random selection.
# Weights must be w >=0 for each stock, and should maximize the value "sharpe" below
# Gibbs sampler for portfolio Varying Weights
set.seed(876)
n <- nrow(daily_return)
# Create a place for sample data
portfolios <- list()
N_port <- 10
S <- 10000
port_samples <- matrix(NA,S*N_port,4)
colnames(port_samples) <- c("ret","s2","sharpe","port")
# Initial Values
mu1 <- colMeans(daily_return)
cov1 <- cov(daily_return)
port_ret1 <- rowSums(daily_return*w)
w <- runif(C,0,1000)
w <- w/sum(w)
mu0 <- mean(port_ret1)
s2 <- t(w)%*%cov1%*%w
# Priors
tau_p <- 10
a <- 0.01
b <- 0.01
V <- 1/tau_p
for (i in 1:N_port){
for (s in 1:S){
P <- n/s2 + V
M <- sum(port_ret1)/s2 + mu0*V
mu <- rnorm(1,M/P, 1/sqrt(P))
A <- n/2 + a
B <- sum((Y-mu)^2)/2 + b
s2 <- 1/rgamma(1,A,B)
sharpe <- mu/sqrt(s2)
port_samples[(s+((i-1)*10000)),] <- c(mu, s2, sharpe,i)
}
portfolios[[i]] <- list(port=i,weights=w)
w <- runif(C,0,1000)
w <- w/sum(w)
}
# Random walk on stocks *univariate
### CAN YOU EXPAND THIS TO MULTIVARIATE AND MAKE IT MORE EFFICIENT???
S <- 10000
ret_samples <- matrix(NA,S,2)
colnames(ret_samples) <- c("E_Y", "s2")
N <- nrow(daily_return)
stocks_rw <- list()
for (i in 1:C){
# Data for individual stock
X <- daily_return[1:(N-1),i]
Y <- daily_return[2:N,i]
n <- length(Y)
# Initial values
mu <- mean(Y)
s2 <- var(Y)
# Priors
mu0 <- 0
tau <- 10
a <- 0.01
b <- 0.01
V <- 1/tau
for (s in 1:S){
P <- n/s2 + V
M <- sum(Y-X)/s2 + mu0*V
mu <- rnorm(1,M/P,1/sqrt(P))
A <- n/2 + a
B <- sum((Y-mu)^2)/2 + b
s2 <- 1/rgamma(1,A,B)
ret_samples[s,] <- c(mu, s2)
}
stocks_rw[[i]] <- ret_samples
ret_samples <- matrix(NA,S,2)
colnames(ret_samples) <- c("E_Y", "s2")
}
stockA <- stock_returns[,2]
N <- length(stockA)
plot(1:N, stockA, type="l")
mean(stockA)
PriceA <- by_symbol[[1]]$close
testA <- lm(PriceA[2:N]~PriceA[1:N-1])
View(testA)
testA
test2A <- lm(stockA[2:N]~stockA[1:N-1])
test2A
plot(PriceA[2:N], PriceA[1:N-1])
cor(PriceA[2:N], PriceA[1:N-1])
plot(PriceA[2:N], PriceA[1:N-1])
plot(stockA[2:N]~stockA[1:N-1])
plot(stockA[2:N], stockA[1:N-1])
stockA <- daily_return[,2]
plot(stockA[2:N], stockA[1:N-1])
cor(stockA[2:N],stockA[1:N-1] )
plot(stockA[2:N], stockA[1:N-1])
plot(1:S,stocks_rw[[2]][,1], type = "l")
colMeans(stocks_rw[[1]])
plot(1:S,stocks_rw[[1]][,1], type = "l")
plot(1:S,stocks_rw[[1]][,2], type = "l")
P <- n/covmat + V
View(P)
rinvwishart(1,N-C,diag(C))
?rinvwishart
rinvwishart(N-C,diag(C))
plot(1:S,stocks_rw[[1]][,1], type = "l")
# Random walk on stocks *univariate
### CAN YOU EXPAND THIS TO MULTIVARIATE AND MAKE IT MORE EFFICIENT???
S <- 10000
ret_samples <- matrix(NA,S,2)
colnames(ret_samples) <- c("E_Y", "s2")
N <- nrow(daily_return)
stocks_rw <- list()
for (i in 1:2){
# Data for individual stock
X <- daily_return[1:(N-1),i]
Y <- daily_return[2:N,i]
n <- length(Y)
# Initial values
mu <- mean(Y)
s2 <- var(Y)
# Priors
mu0 <- 0
tau <- 10
a <- 0.01
b <- 0.01
V <- 1/tau
for (s in 1:S){
P <- n/s2 + V
M <- sum(Y)/s2 + mu0*V
mu <- rnorm(1,M/P,1/sqrt(P))
A <- n/2 + a
B <- sum((Y-mu)^2)/2 + b
s2 <- 1/rgamma(1,A,B)
ret_samples[s,] <- c(mu, s2)
}
stocks_rw[[i]] <- ret_samples
ret_samples <- matrix(NA,S,2)
colnames(ret_samples) <- c("E_Y", "s2")
}
plot(1:S,stocks_rw[[1]][,1], type = "l")
colMeans(stocks_rw[[1]])
Z <- matrix(c(5,2,5,1),2,2)
Z
Z2 <- c(4,3)
Z-Z2
Z-t(Z2)
t(Z)-Z2
t(t(Z)-Z2)
S <- 10
S <- 10
N <- nrow(daily_return)
C <- ncol(daily_return)
stocks_rw <- list()
# Data
X <- daily_return[1:(N-1),]
Y <- daily_return[2:N,]
n <- length(Y)
# Initial values
mu <- colMeans(Y-X)
covmat <- cov(Y-X)
# Priors
mu0 <- rep(0,C)
tau <- 10
tau <- 10
V <- diag(C)/tau
P_Y <- matrix(NA,n,C)
for(s in 1:S){
P <- covmat + V
for (t in 1:n){
P_Y[t,] <- rmvnorm(1,X[t,],P)
}
epsilon <- Y - P_Y
covmat2 <- cov(epsilon)
covmat <- rinvwishart(n-C, covmat2)
stocks_rw[[s]] <- list(P_Y = P_Y, covmat = covmat)
}
# Random walk on stocks *MULTIVARIATE
S <- 10
N <- nrow(daily_return)
C <- ncol(daily_return)
stocks_rw <- list()
# Data
X <- daily_return[1:(N-1),]
Y <- daily_return[2:N,]
n <- nrow(Y)
# Initial values
mu <- colMeans(Y-X)
covmat <- cov(Y-X)
# Priors
mu0 <- rep(0,C)
tau <- 10
V <- diag(C)/tau
P_Y <- matrix(NA,n,C)
for(s in 1:S){
P <- covmat + V
for (t in 1:n){
P_Y[t,] <- rmvnorm(1,X[t,],P)
}
epsilon <- Y - P_Y
covmat2 <- cov(epsilon)
covmat <- rinvwishart(n-C, covmat2)
stocks_rw[[s]] <- list(P_Y = P_Y, covmat = covmat)
}
for (s in 1:S){
P <- covmat + V
M <- mu + mu0
mu <- rmvnorm(1,M,P)
E_Y <-
A <- n/2 + a
B <- sum((Y-mu)^2)/2 + b
covmat <- rinvwishart(N-C,diag(C))
ret_samples[[s]] <- list(returns = mu, Sigma = covmat)
}
# Random walk on stocks *MULTIVARIATE
S <- 10
N <- nrow(daily_return)
C <- ncol(daily_return)
stocks_rw <- list()
# Data
X <- daily_return[1:(N-1),]
Y <- daily_return[2:N,]
n <- nrow(Y)
# Initial values
mu <- colMeans(Y-X)
covmat <- cov(Y-X)
# Priors
mu0 <- rep(0,C)
tau <- 10
V <- diag(C)/tau
P_Y <- matrix(NA,n,C)
for(s in 1:S){
P <- covmat + V
for (t in 1:n){
P_Y[t,] <- rmvnorm(1,X[t,],P)
}
epsilon <- Y - P_Y
covmat2 <- cov(epsilon)
covmat <- rinvwishart(n-C, covmat2)
stocks_rw[[s]] <- list(P_Y = P_Y, covmat = covmat)
}
View(X)
View(P_Y)
test <- Y - P_Y
View(test)
colMeans(test)
test2 <- colMeans(test)
mean(test2)
# Random walk on stocks *MULTIVARIATE
S <- 10
N <- nrow(daily_return)
C <- ncol(daily_return)
stocks_rw <- list()
# Data
X <- daily_return[1:(N-1),]
Y <- daily_return[2:N,]
n <- nrow(Y)
# Initial values
mu <- colMeans(Y-X)
covmat <- cov(Y-X)
# Priors
mu0 <- rep(0,C)
tau <- 10
V <- diag(C)/tau
P_Y <- matrix(NA,n,C)
for(s in 1:S){
P <- (1/n)*covmat + V
for (t in 1:n){
P_Y[t,] <- rmvnorm(1,X[t,],P)
}
epsilon <- Y - P_Y
covmat2 <- cov(epsilon)
covmat <- rinvwishart(n-C, covmat2)
stocks_rw[[s]] <- list(P_Y = P_Y, covmat = covmat)
}
View(P_Y)
test3 <- mean(colMeans(Y-P_Y))
test3
mean(test2)
# Random walk on stocks *MULTIVARIATE
S <- 100
N <- nrow(daily_return)
C <- ncol(daily_return)
stocks_rw <- list()
# Data
X <- daily_return[1:(N-1),]
Y <- daily_return[2:N,]
n <- nrow(Y)
# Initial values
mu <- colMeans(Y-X)
covmat <- cov(Y-X)
# Priors
mu0 <- rep(0,C)
tau <- 10
V <- diag(C)/tau
P_Y <- matrix(NA,n,C)
for(s in 1:S){
P <- (1/n)*covmat + V
for (t in 1:n){
P_Y[t,] <- rmvnorm(1,X[t,],P)
}
epsilon <- Y - P_Y
covmat2 <- cov(epsilon)
covmat <- rinvwishart(n-C, covmat2)
stocks_rw[[s]] <- list(P_Y = P_Y, covmat = covmat)
}
# Random walk on stocks *MULTIVARIATE
S <- 100
N <- nrow(daily_return)
C <- ncol(daily_return)
stocks_rw <- list()
# Data
X <- daily_return[1:(N-1),]
Y <- daily_return[2:N,]
n <- nrow(Y)
# Initial values
mu <- colMeans(Y-X)
covmat <- cov(Y-X)
# Priors
mu0 <- rep(0,C)
tau <- 10
V <- diag(C)/tau
P_Y <- matrix(NA,n,C)
for(s in 1:S){
P <- (1/n)*covmat + V
for (t in 1:n){
P_Y[t,] <- rmvnorm(1,X[t,],P)
}
epsilon <- Y - P_Y
covmat2 <- cov(epsilon)
covmat <- rinvwishart(n-C, covmat2)
stocks_rw[[s]] <- list(P_Y = P_Y, covmat = covmat)
}
# Random walk on stocks *MULTIVARIATE
S <- 100
N <- nrow(daily_return)
C <- ncol(daily_return)
stocks_rw <- list()
# Data
X <- daily_return[1:(N-1),]
Y <- daily_return[2:N,]
n <- nrow(Y)
# Initial values
mu <- colMeans(Y-X)
covmat <- cov(Y-X)
# Priors
mu0 <- rep(0,C)
tau <- 10
V <- diag(C)/tau
P_Y <- matrix(NA,n,C)
for(s in 1:S){
P <- (1/n)*covmat + V
for (t in 1:n){
P_Y[t,] <- rmvnorm(1,X[t,],P)
}
epsilon <- Y - P_Y
covmat2 <- cov(epsilon)
covmat <- rinvwishart(n-C, covmat2)
stocks_rw[[s]] <- list(P_Y = P_Y, covmat = covmat)
}
#View(P_Y)
View(stocks_rw)
samples <- data.table()
for(i in length(stocks_rw)){
samples <- rbind(samples, stocks_rw[[i]]$P_Y)
}
View(samples)
View(X)
samples <- data.table()
for(i in length(stocks_rw)){
errors <- Y-stocks_rw[[i]]$P_Y
out <- cbind(stocks_rw[[i]]$P_Y, errors)
samples <- rbind(samples, out)
}
View(samples)
samples <- data.table()
for(i in length(stocks_rw)){
errors <- Y-stocks_rw[[i]]$P_Y
out <- cbind(stocks_rw[[i]]$P_Y, errors)
samples <- rbind(samples, out)
}
colMeans(samples)
#View(samples)
N <- nrow(samples)
for (i in 1:ncol(samples)){
plot(1:N, samples[,i], type = 'l')
plot(density(samples[,i]))
}
View(samples[,2])
N <- nrow(samples)
for (i in 1:ncol(samples)){
plot(1:N, samples[,..i], type = 'l')
plot(density(samples[,..i]))
}
View(samples[,..i])
plot(1:N, samples[,..i], type = 'l')
length(samples[,..i])
View(samples[,..i])
samples <- as.data.frame(samples)
N <- nrow(samples)
for (i in 1:ncol(samples)){
plot(1:N, samples[,i], type = 'l')
plot(density(samples[,i]))
}
# Random walk on stocks *MULTIVARIATE
S <- 10000
N <- nrow(daily_return)
C <- ncol(daily_return)
stocks_rw <- list()
# Data
X <- daily_return[1:(N-1),]
Y <- daily_return[2:N,]
n <- nrow(Y)
# Initial values
mu <- colMeans(Y-X)
covmat <- cov(Y-X)
# Priors
mu0 <- rep(0,C)
tau <- 10
V <- diag(C)/tau
P_Y <- matrix(NA,n,C)
for(s in 1:S){
P <- (1/n)*covmat + V
for (t in 1:n){
P_Y[t,] <- rmvnorm(1,X[t,],P)
}
epsilon <- Y - P_Y
colnames(epsilon) <- colnames(X)
covmat2 <- cov(epsilon)
covmat <- rinvwishart(n-C, covmat2)
stocks_rw[[s]] <- list(P_Y = P_Y, covmat = covmat)
}
?source
#########################################################################################################################
#############         THIS FILE READS IN DATA AND MODELS STOCK RETURNS USINGS A RANDOM WALK       #############
#########################################################################################################################
#########################################################################################################################
# SET WORKING DIRECTORY
#setwd("~/Documents/bayesian-portfolio/")
#########################################################################################################################
# SOURCE DATA
source("./data.R", echo = FALSE)
# Multivariate Random walk for model for fitting daily stock returns.
S <- 10000
N <- nrow(daily_return)
C <- ncol(daily_return)
stocks_rw <- list()
# Data
X <- daily_return[1:(N-1),]
Y <- daily_return[2:N,]
n <- nrow(Y)
# Initial values
mu <- colMeans(Y-X)
covmat <- cov(Y-X)
# Priors
mu0 <- rep(0,C)
tau <- 10
V <- diag(C)/tau
P_Y <- matrix(NA,n,C)
for(s in 1:S){
P <- (1/n)*covmat + V
for (t in 1:n){
P_Y[t,] <- rmvnorm(1,X[t,],P)
}
epsilon <- Y - P_Y
colnames(epsilon) <- colnames(X)
covmat2 <- cov(epsilon)
covmat <- rinvwishart(n-C, covmat2)
stocks_rw[[s]] <- list(P_Y = P_Y, covmat = covmat)
}
#########################################################################################################################
#############         THIS FILE READS IN DATA AND MODELS STOCK RETURNS USINGS A RANDOM WALK       #############
#########################################################################################################################
#########################################################################################################################
# SET WORKING DIRECTORY
#setwd("~/Documents/bayesian-portfolio/")
#########################################################################################################################
# SOURCE DATA
source("./data.R")
# Multivariate Random walk for model for fitting daily stock returns.
S <- 10000
N <- nrow(daily_return)
C <- ncol(daily_return)
stocks_rw <- list()
# Data
X <- daily_return[1:(N-1),]
Y <- daily_return[2:N,]
n <- nrow(Y)
# Initial values
mu <- colMeans(Y-X)
covmat <- cov(Y-X)
# Priors
mu0 <- rep(0,C)
tau <- 10
V <- diag(C)/tau
P_Y <- matrix(NA,n,C)
for(s in 1:S){
P <- (1/n)*covmat + V
for (t in 1:n){
P_Y[t,] <- rmvnorm(1,X[t,],P)
}
epsilon <- Y - P_Y
colnames(epsilon) <- colnames(X)
covmat2 <- cov(epsilon)
covmat <- rinvwishart(n-C, covmat2)
stocks_rw[[s]] <- list(P_Y = P_Y, covmat = covmat)
}
source('~/Documents/bayesian-portfolio/data.R')
> source('~/data.R')
source('~/data.R')
setwd("~/Documents/bayesian-portfolio/")
source('~/data.R')
getwd()
source('~/data.R')
source('./data.R')
